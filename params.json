{
  "name": "Tsched",
  "tagline": "Thread Scheduler for Lua",
  "body": "# tsched\r\nThread Scheduler for Lua\r\n\r\n***\r\n\r\n### Usage\r\n\r\nTo run a file with `tsched`, simply add `tsched.lua` before the target file and any arguments.\r\n\r\n###### Command\r\n`luajit tsched.lua target.lua arg1 arg2 ...`\r\n\r\n###### Sublime Text Build-System File (Tools->Build System->New Build System...)\r\n\r\n```json\r\n{\r\n\t\"cmd\": [\"luajit\", \"PATHTOTSCHED.lua\", \"$file\"],\r\n\t\"selector\": \"source.lua\"\r\n}\r\n```\r\n\r\n***\r\n\r\n### Documentation\r\n\r\n###### Docs\r\n\r\n```lua\r\nvoid run(function f, tuple args)\r\n```\r\nCreates a new thread with function `f`, pushes it to the front of the thread scheduler, and suspends the current thread-- essentially running `f` immediately.\r\n\r\n\r\n```lua\r\nvoid spawn(function f, tuple args)\r\n```\r\nCreates a new thread with function `f` and adds it to the back of the thread queue. The current thread is not suspended.\r\n\r\n\r\n```lua\r\nvoid wait(number delay)\r\n```\r\nPauses the current thread for `delay` seconds.\r\nIf `delay` is not a number or nil, it is set to 0.\r\n\r\n\r\n```lua\r\nvoid suspend()\r\n```\r\nSuspends the current thread.\r\n\r\n\r\n```lua\r\ntuple yield(function f, tuple args)\r\n```\r\nSuspends the current thread until a condition is met. To resume the thread, `f` must return `true`.\r\n`f` is called with arguments `args` and any extra arguments returned from `f` when the thread is resumed (it returns true) will be returned to `yield`.\r\n\r\n\r\n```lua\r\nvoid delay(number delay, function f, tuple args)\r\n```\r\nCalls `f` with arguments `args` after `delay` seconds. It is equivalent to ```spawn(function() wait(delay) f(...) end)```\r\n\r\n###### Extra\r\n\r\n`tsched` was inspired by and is very similar to ROBLOX's Lua thread scheduler. For further documentation, see http://wiki.roblox.com/index.php?title=Thread_scheduler\r\n\r\n***\r\n\r\n### Code Example\r\n\r\n###### Input\r\n\r\n```lua\r\nprint\"main thread begin\"\r\n\r\nlocal function spawned_function(a, b, c)\r\n\tprint\"in spawned_function\"\r\n\r\n\tlocal condition = false\r\n\r\n\t-- set condition to true after 2 seconds\r\n\tdelay(2, function()\r\n\t\tcondition = true\r\n\tend)\r\n\r\n\t-- thread will yield until condition is true\r\n\tprint(yield(function()\r\n\t\tif (condition) then\r\n\t\t\treturn true, \"hello!\"\r\n\t\tend\r\n\r\n\t\treturn false\r\n\tend))\r\n\r\n\tprint\"spawned_function end\"\r\nend\r\n\r\nlocal function delayed_function(a, b, c)\r\n\tprint\"in delayed_function\"\r\n\tprint(a, b, c)\r\n\r\n\trun(function()\r\n\t\tprint\"in run function\"\r\n\r\n\t\tspawn(spawned_function, 4, 5, 7)\r\n\r\n\t\tprint\"waiting ...\"\r\n\t\twait(1)\r\n\r\n\t\tprint\"run function end\"\r\n\tend)\r\n\r\n\tprint\"delayed_function end\"\r\nend\r\n\r\ndelay(1, delayed_function, 1, 2, 3)\r\n\r\nprint\"main thread end\"\r\n```\r\n\r\n###### Output\r\n\r\n```\r\nmain thread begin\r\nmain thread end\r\nin delayed_function\r\n1\t2\t3\r\nin run function\r\nwaiting ...\r\ndelayed_function end\r\nin spawned_function\r\nrun function end\r\nhello!\r\nspawned_function end\r\n[Finished in 3.1s]\r\n```\r\n\r\n***\r\n\r\n### Extensions\r\n\r\n#### socket.lua\r\n\r\n`socket.lua` is an extension of [luasockets](https://github.com/diegonehab/luasocket) for `tsched` that allows for asynchronous functionality. \r\n\r\n##### Example\r\n\r\n###### Input\r\n\r\n```lua\r\nlocal socket = require\"socket\"\r\nlocal async = require\"tsched.socket\"\r\n\r\nlocal function download(host, file)\r\n\tlocal sock = socket.tcp()\r\n\tlocal buff = \"\"\r\n\r\n\tassert(async.connect(sock, host, 80))\r\n\r\n\tasync.send(sock, \"GET \" .. tostring(file) .. \" HTTP/1.1\\r\\n\\r\\n\")\r\n\r\n\twhile (true) do\r\n\t\tlocal str, err = async.receive(sock)\r\n\r\n\t\tif (str) then \r\n\t\t\tbuff = buff .. str\r\n\t\telseif (err == \"closed\") then\r\n\t\t\tbreak\r\n\t\tend\r\n\tend\r\n\r\n\tsock:close()\r\n\r\n\treturn buff\r\nend\r\n\r\nfor i = 1, 5 do\r\n\tspawn(function()\r\n\t\tprint(\"download start \" .. i)\r\n\t\tdownload(\"www.example.com\", \"/\")\r\n\t\tprint(\"download end \" .. i)\r\n\tend)\r\nend\r\n\r\nfor i = 1, 5 do\r\n\tspawn(function()\r\n\t\tprint(\"thread \" .. i)\r\n\tend)\r\nend\r\n```\r\n###### Output\r\n\r\n```\r\ndownload start 1\r\ndownload start 2\r\ndownload start 3\r\ndownload start 4\r\ndownload start 5\r\nthread 1\r\nthread 2\r\nthread 3\r\nthread 4\r\nthread 5\r\ndownload end 1\r\ndownload end 4\r\ndownload end 5\r\ndownload end 3\r\ndownload end 2\r\n[Finished in 0.1s]\r\n```\r\n\r\n#### http.lua\r\n\r\nLike `socket.lua`, `http.lua` gives asynchronous functionality to [luasockets](https://github.com/diegonehab/luasocket)'s http namespace/library. The module also supports HTTPS, if [luasec](https://github.com/brunoos/luasec) is installed.\r\n\r\nFor documentation, see: http://w3.impa.br/~diego/software/luasocket/http.html#request \r\n\r\n##### Example\r\n\r\n###### Input\r\n\r\n```lua\r\nlocal http = require\"tsched.http\"\r\n\r\nfor i = 1, 10 do\r\n\tspawn(function()\r\n\t\tlocal result, err = http.request(\"https://www.example.com:443/\")\r\n\t\tprint(result:sub(1, 10))\r\n\tend)\r\nend\r\n```\r\n\r\n###### Output\r\n\r\n```\r\n<!doctype \r\n<!doctype \r\n<!doctype \r\n<!doctype \r\n<!doctype \r\n<!doctype \r\n<!doctype \r\n<!doctype \r\n<!doctype \r\n<!doctype \r\n[Finished in 1.0s]\r\n```\r\n\r\n***\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}